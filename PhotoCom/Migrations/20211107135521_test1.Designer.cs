// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoCom.Model;

namespace PhotoCom.Migrations
{
    [DbContext(typeof(PhotoContext))]
    [Migration("20211107135521_test1")]
    partial class test1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PhotoCom.Model.Table.DOCUMENTS_TB", b =>
                {
                    b.Property<int>("DOC_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CAPUTURED")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CAPUTURED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CREATED_ON")
                        .HasColumnType("datetime2");

                    b.Property<string>("FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILE_SIZE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GEOLOCATION")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_HIDDEN")
                        .HasColumnType("bit");

                    b.Property<bool>("IS_PUBLIC")
                        .HasColumnType("bit");

                    b.Property<string>("ORGINAL_FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TAGS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DOC_ID");

                    b.HasIndex("CREATED_BY");

                    b.ToTable("DOCUMENTS_TB");
                });

            modelBuilder.Entity("PhotoCom.Model.Table.DOC_LOG_TB", b =>
                {
                    b.Property<int>("DOC_LOG_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CAPUTURED")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CAPUTURED_DATE")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("CREATED_BY")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CREATED_ON")
                        .HasColumnType("datetime2");

                    b.Property<int>("DOC_ID")
                        .HasColumnType("int");

                    b.Property<string>("FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILE_SIZE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FILE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GEOLOCATION")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_HIDDEN")
                        .HasColumnType("bit");

                    b.Property<bool>("IS_PUBLIC")
                        .HasColumnType("bit");

                    b.Property<string>("ORGINAL_FILE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TAGS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DOC_LOG_ID");

                    b.HasIndex("CREATED_BY");

                    b.ToTable("DOC_LOG_TB");
                });

            modelBuilder.Entity("PhotoCom.Model.Table.DOC_SHARED_TB", b =>
                {
                    b.Property<int>("SHARED_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DOC_ID")
                        .HasColumnType("int");

                    b.Property<string>("USER_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SHARED_ID");

                    b.HasIndex("DOC_ID");

                    b.HasIndex("USER_ID");

                    b.ToTable("DOC_SHARED_TB");
                });

            modelBuilder.Entity("PhotoCom.Model.Table.USERS_TB", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FIRST_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LAST_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PhotoCom.Model.Table.USERS_TB", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PhotoCom.Model.Table.USERS_TB", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoCom.Model.Table.USERS_TB", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PhotoCom.Model.Table.USERS_TB", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoCom.Model.Table.DOCUMENTS_TB", b =>
                {
                    b.HasOne("PhotoCom.Model.Table.USERS_TB", "CREATED_BY_USER")
                        .WithMany()
                        .HasForeignKey("CREATED_BY");
                });

            modelBuilder.Entity("PhotoCom.Model.Table.DOC_LOG_TB", b =>
                {
                    b.HasOne("PhotoCom.Model.Table.USERS_TB", "CREATED_BY_USER")
                        .WithMany()
                        .HasForeignKey("CREATED_BY");
                });

            modelBuilder.Entity("PhotoCom.Model.Table.DOC_SHARED_TB", b =>
                {
                    b.HasOne("PhotoCom.Model.Table.DOCUMENTS_TB", "DOCUMENTS")
                        .WithMany()
                        .HasForeignKey("DOC_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoCom.Model.Table.USERS_TB", "USER")
                        .WithMany()
                        .HasForeignKey("USER_ID");
                });
#pragma warning restore 612, 618
        }
    }
}
